/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.48
 * Generated at: 2018-03-01 19:45:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testAjaxPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>testAjaxPage.jsp</title>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"/finalp/resources/js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t$(function(){\r\n");
      out.write("\t\t\t$(\"#test1\").on(\"click\", function(){\r\n");
      out.write("\t\t\t\t//alert(\"test1 button click!\");\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: \"test1.do\", \r\n");
      out.write("\t\t\t\t\tdata: {name : '지으니', age: 15},\r\n");
      out.write("\t\t\t\t\ttype: \"post\", \r\n");
      out.write("\t\t\t\t\tsuccess: function(result){\r\n");
      out.write("\t\t\t\t\t\tif(result === \"ok\")\r\n");
      out.write("\t\t\t\t\t\t\talert(\"전송 성공\");\r\n");
      out.write("\t\t\t\t\t\telse\r\n");
      out.write("\t\t\t\t\t\t\talert(\"전송 실패\");\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\t\t\t//error 500 : 서버 관련\r\n");
      out.write("\t\t\t\t\t\t//error 400 : 요청 관련\r\n");
      out.write("\t\t\t\t\t\t//200번은 성공\r\n");
      out.write("\t\t\t\t\t\t//http error code 참고할 것\r\n");
      out.write("\t\t\t\t\t\talert(\"error code: \" + request.status + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"message : \" + request.responseText + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"error : \" + errorData);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#test2\").on(\"click\", function(){\r\n");
      out.write("\t\t\t\t//test2.do 로 부터 json객체를 리턴 받아\r\n");
      out.write("\t\t\t\t//div에 출력\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: \"test2.do\",\r\n");
      out.write("\t\t\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\t\t\tdataType: \"json\",\r\n");
      out.write("\t\t\t\t\tsuccess: function(data){\r\n");
      out.write("\t\t\t\t\t\tconsole.log(\"data : \" + data);\r\n");
      out.write("\t\t\t\t\t\t$('#d2').html(\"번호 : \" + data.no\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"<br>제목 : \" + data.title\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"<br>작성자 : \" + decodeURIComponent(data.writer)\r\n");
      out.write("\t\t\t\t\t\t\t\t//한글로 인코딩\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"<br>내용 : \" + decodeURIComponent(data.content.replace(/\\+/g, \" \")));\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\t\t\talert(\"error code: \" + request.status + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"message : \" + request.responseText + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"error : \" + errorData);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#test3\").on(\"click\", function(){\r\n");
      out.write("\t\t\t\t//컨트롤러로 부터 리스트를 받아서 출력 처리함\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: \"test3.do\",\r\n");
      out.write("\t\t\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\t\t\tdataType: \"json\",\r\n");
      out.write("\t\t\t\t\tsuccess: function(data){\r\n");
      out.write("\t\t\t\t\t\tconsole.log(data); //object라고 출력됨\r\n");
      out.write("\t\t\t\t\t\t//리턴된 하나의 객체를 문자열로 변환\r\n");
      out.write("\t\t\t\t\t\tvar jsonStr = JSON.stringify(data);\r\n");
      out.write("\t\t\t\t\t\t//변환된 문자열을 json 객체로 변환\r\n");
      out.write("\t\t\t\t\t\tvar json = JSON.parse(jsonStr);\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tvar values = $('#d3').html();\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tfor(var i in json.list){\r\n");
      out.write("\t\t\t\t\t\t\tvalues += json.list[i].userId + \", \"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ json.list[i].userPwd + \", \"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ decodeURIComponent(json.list[i].userName) + \", \"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ json.list[i].age + \", \"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ json.list[i].email + \", \"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ json.list[i].phone + \"<br>\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t$(\"#d3\").html(values);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\t\t\talert(\"error code: \" + request.status + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"message : \" + request.responseText + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t\t\t+ \"error : \" + errorData);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#test4\").on();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t$(\"#test5\").on();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#test6\").on();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});//document.ready\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>Spring에서의 Ajax 사용 테스트 페이지</h1>\r\n");
      out.write("<ol>\r\n");
      out.write("<li>서버 쪽 컨트롤러로 값 보내기</li>\r\n");
      out.write("<button id=\"test1\">테스트1</button>\r\n");
      out.write("<div id=\"d1\"></div>\r\n");
      out.write("\r\n");
      out.write("<li>컨트롤러에서 리턴하는 JSON 객체 받아서 출력하기</li>\r\n");
      out.write("<button id=\"test2\">테스트2</button>\r\n");
      out.write("<div id=\"d2\"></div>\r\n");
      out.write("\r\n");
      out.write("<li>컨트롤러에서 리턴하는 JSON 배열 받아서 출력하기</li>\r\n");
      out.write("<button id=\"test3\">테스트3</button>\r\n");
      out.write("<div id=\"d3\"></div>\r\n");
      out.write("\r\n");
      out.write("<li>컨트롤러에서 맵(Map) 객체를 받아서 출력하기</li>\r\n");
      out.write("<button id=\"test4\">테스트4</button>\r\n");
      out.write("<div id=\"d4\"></div>\r\n");
      out.write("\r\n");
      out.write("<li>뷰에서 JSON객체를 컨트롤러로 보내기</li>\r\n");
      out.write("<button id=\"test5\">테스트5</button>\r\n");
      out.write("<div id=\"d5\"></div>\r\n");
      out.write("\r\n");
      out.write("<li>뷰에서 JSON 배열을 컨트롤러로 보내기</li>\r\n");
      out.write("<button id=\"test6\">테스트6</button>\r\n");
      out.write("<div id=\"d6\"></div>\r\n");
      out.write("\r\n");
      out.write("</ol>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
